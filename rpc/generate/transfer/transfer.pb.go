// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transfer.proto

package transfer // import "."

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ChatRequestAndResponse struct {
	FromConnector        string   `protobuf:"bytes,1,opt,name=from_connector,json=fromConnector" json:"from_connector,omitempty"`
	ToConnector          string   `protobuf:"bytes,2,opt,name=to_connector,json=toConnector" json:"to_connector,omitempty"`
	MsgType              int32    `protobuf:"varint,3,opt,name=msg_type,json=msgType" json:"msg_type,omitempty"`
	Message              string   `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	Data                 *Data    `protobuf:"bytes,5,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChatRequestAndResponse) Reset()         { *m = ChatRequestAndResponse{} }
func (m *ChatRequestAndResponse) String() string { return proto.CompactTextString(m) }
func (*ChatRequestAndResponse) ProtoMessage()    {}
func (*ChatRequestAndResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_transfer_7017eb1dea53ae78, []int{0}
}
func (m *ChatRequestAndResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatRequestAndResponse.Unmarshal(m, b)
}
func (m *ChatRequestAndResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatRequestAndResponse.Marshal(b, m, deterministic)
}
func (dst *ChatRequestAndResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatRequestAndResponse.Merge(dst, src)
}
func (m *ChatRequestAndResponse) XXX_Size() int {
	return xxx_messageInfo_ChatRequestAndResponse.Size(m)
}
func (m *ChatRequestAndResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatRequestAndResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChatRequestAndResponse proto.InternalMessageInfo

func (m *ChatRequestAndResponse) GetFromConnector() string {
	if m != nil {
		return m.FromConnector
	}
	return ""
}

func (m *ChatRequestAndResponse) GetToConnector() string {
	if m != nil {
		return m.ToConnector
	}
	return ""
}

func (m *ChatRequestAndResponse) GetMsgType() int32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *ChatRequestAndResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ChatRequestAndResponse) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type Data struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Cmd                  int32    `protobuf:"varint,2,opt,name=cmd" json:"cmd,omitempty"`
	FromId               string   `protobuf:"bytes,3,opt,name=from_id,json=fromId" json:"from_id,omitempty"`
	DestId               string   `protobuf:"bytes,4,opt,name=dest_id,json=destId" json:"dest_id,omitempty"`
	Msg                  string   `protobuf:"bytes,5,opt,name=msg" json:"msg,omitempty"`
	MsgType              int32    `protobuf:"varint,6,opt,name=msg_type,json=msgType" json:"msg_type,omitempty"`
	AckMsgType           int32    `protobuf:"varint,7,opt,name=ack_msg_type,json=ackMsgType" json:"ack_msg_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_transfer_7017eb1dea53ae78, []int{1}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (dst *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(dst, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Data) GetCmd() int32 {
	if m != nil {
		return m.Cmd
	}
	return 0
}

func (m *Data) GetFromId() string {
	if m != nil {
		return m.FromId
	}
	return ""
}

func (m *Data) GetDestId() string {
	if m != nil {
		return m.DestId
	}
	return ""
}

func (m *Data) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Data) GetMsgType() int32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *Data) GetAckMsgType() int32 {
	if m != nil {
		return m.AckMsgType
	}
	return 0
}

func init() {
	proto.RegisterType((*ChatRequestAndResponse)(nil), "hello.ChatRequestAndResponse")
	proto.RegisterType((*Data)(nil), "hello.Data")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Transfer service

type TransferClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (Transfer_ChatClient, error)
}

type transferClient struct {
	cc *grpc.ClientConn
}

func NewTransferClient(cc *grpc.ClientConn) TransferClient {
	return &transferClient{cc}
}

func (c *transferClient) Chat(ctx context.Context, opts ...grpc.CallOption) (Transfer_ChatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Transfer_serviceDesc.Streams[0], c.cc, "/hello.Transfer/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &transferChatClient{stream}
	return x, nil
}

type Transfer_ChatClient interface {
	Send(*ChatRequestAndResponse) error
	Recv() (*ChatRequestAndResponse, error)
	grpc.ClientStream
}

type transferChatClient struct {
	grpc.ClientStream
}

func (x *transferChatClient) Send(m *ChatRequestAndResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transferChatClient) Recv() (*ChatRequestAndResponse, error) {
	m := new(ChatRequestAndResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Transfer service

type TransferServer interface {
	Chat(Transfer_ChatServer) error
}

func RegisterTransferServer(s *grpc.Server, srv TransferServer) {
	s.RegisterService(&_Transfer_serviceDesc, srv)
}

func _Transfer_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransferServer).Chat(&transferChatServer{stream})
}

type Transfer_ChatServer interface {
	Send(*ChatRequestAndResponse) error
	Recv() (*ChatRequestAndResponse, error)
	grpc.ServerStream
}

type transferChatServer struct {
	grpc.ServerStream
}

func (x *transferChatServer) Send(m *ChatRequestAndResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transferChatServer) Recv() (*ChatRequestAndResponse, error) {
	m := new(ChatRequestAndResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Transfer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hello.Transfer",
	HandlerType: (*TransferServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _Transfer_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "transfer.proto",
}

func init() { proto.RegisterFile("transfer.proto", fileDescriptor_transfer_7017eb1dea53ae78) }

var fileDescriptor_transfer_7017eb1dea53ae78 = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x51, 0x4d, 0x4f, 0xc2, 0x40,
	0x10, 0x75, 0xa1, 0x1f, 0x30, 0x20, 0x31, 0x7b, 0xd0, 0x6a, 0x62, 0xac, 0x24, 0x26, 0x3d, 0x35,
	0x06, 0x8f, 0x9e, 0x14, 0x2f, 0x98, 0x78, 0xd9, 0x10, 0x0f, 0x5e, 0xc8, 0xda, 0x1d, 0x0a, 0x81,
	0x76, 0x6b, 0x77, 0x3d, 0xf0, 0x93, 0xfc, 0x07, 0xfe, 0x3c, 0xb3, 0x03, 0x55, 0x49, 0x8c, 0xb7,
	0x79, 0xf3, 0xde, 0xee, 0xcc, 0x7b, 0x03, 0x03, 0x5b, 0xcb, 0xd2, 0xcc, 0xb1, 0x4e, 0xab, 0x5a,
	0x5b, 0xcd, 0xfd, 0x05, 0xae, 0xd7, 0x7a, 0xf8, 0xc9, 0xe0, 0x78, 0xbc, 0x90, 0x56, 0xe0, 0xdb,
	0x3b, 0x1a, 0x7b, 0x57, 0x2a, 0x81, 0xa6, 0xd2, 0xa5, 0x41, 0x7e, 0x05, 0x83, 0x79, 0xad, 0x8b,
	0x59, 0xa6, 0xcb, 0x12, 0x33, 0xab, 0xeb, 0x88, 0xc5, 0x2c, 0xe9, 0x8a, 0x43, 0xd7, 0x1d, 0x37,
	0x4d, 0x7e, 0x09, 0x7d, 0xab, 0x7f, 0x89, 0x5a, 0x24, 0xea, 0x59, 0xfd, 0x23, 0x39, 0x85, 0x4e,
	0x61, 0xf2, 0x99, 0xdd, 0x54, 0x18, 0xb5, 0x63, 0x96, 0xf8, 0x22, 0x2c, 0x4c, 0x3e, 0xdd, 0x54,
	0xc8, 0x23, 0x08, 0x0b, 0x34, 0x46, 0xe6, 0x18, 0x79, 0xf4, 0xb0, 0x81, 0xfc, 0x02, 0x3c, 0x25,
	0xad, 0x8c, 0xfc, 0x98, 0x25, 0xbd, 0x51, 0x2f, 0xa5, 0x7d, 0xd3, 0x07, 0x69, 0xa5, 0x20, 0x62,
	0xf8, 0xc1, 0xc0, 0x73, 0x90, 0x0f, 0xa0, 0xb5, 0x54, 0xb4, 0x9c, 0x2f, 0x5a, 0x4b, 0xc5, 0x8f,
	0xa0, 0x9d, 0x15, 0x8a, 0x16, 0xf1, 0x85, 0x2b, 0xf9, 0x09, 0x84, 0x64, 0x65, 0xa9, 0x68, 0x7e,
	0x57, 0x04, 0x0e, 0x4e, 0x88, 0x50, 0x68, 0xac, 0x23, 0xb6, 0xe3, 0x03, 0x07, 0x27, 0xf4, 0x47,
	0x61, 0x72, 0x1a, 0xde, 0x15, 0xae, 0xdc, 0x33, 0x11, 0xec, 0x9b, 0x88, 0xa1, 0x2f, 0xb3, 0xd5,
	0xec, 0x9b, 0x0e, 0x89, 0x06, 0x99, 0xad, 0x9e, 0xb6, 0x8a, 0xd1, 0x33, 0x74, 0xa6, 0xbb, 0xfc,
	0xf9, 0x23, 0x78, 0x2e, 0x71, 0x7e, 0xbe, 0xb3, 0xf4, 0x77, 0xfc, 0x67, 0xff, 0xd3, 0xc3, 0x83,
	0x84, 0x5d, 0xb3, 0xfb, 0xfe, 0x0b, 0xa4, 0xb7, 0xcd, 0x65, 0x5f, 0x03, 0x3a, 0xed, 0xcd, 0x57,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x78, 0xf1, 0x8b, 0xc7, 0xec, 0x01, 0x00, 0x00,
}
