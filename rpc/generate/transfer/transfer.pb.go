// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transfer.proto

package transfer // import "."

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PingRequest struct {
	Connector            string   `protobuf:"bytes,1,opt,name=connector" json:"connector,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_transfer_e57ce5730d8beaab, []int{0}
}
func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingRequest.Unmarshal(m, b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
}
func (dst *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(dst, src)
}
func (m *PingRequest) XXX_Size() int {
	return xxx_messageInfo_PingRequest.Size(m)
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

func (m *PingRequest) GetConnector() string {
	if m != nil {
		return m.Connector
	}
	return ""
}

func (m *PingRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PingResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingResponse) Reset()         { *m = PingResponse{} }
func (m *PingResponse) String() string { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()    {}
func (*PingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_transfer_e57ce5730d8beaab, []int{1}
}
func (m *PingResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingResponse.Unmarshal(m, b)
}
func (m *PingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingResponse.Marshal(b, m, deterministic)
}
func (dst *PingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingResponse.Merge(dst, src)
}
func (m *PingResponse) XXX_Size() int {
	return xxx_messageInfo_PingResponse.Size(m)
}
func (m *PingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PingResponse proto.InternalMessageInfo

func (m *PingResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type TransferRequestAndResponse struct {
	FromConnector        string   `protobuf:"bytes,1,opt,name=from_connector,json=fromConnector" json:"from_connector,omitempty"`
	ToConnector          string   `protobuf:"bytes,2,opt,name=to_connector,json=toConnector" json:"to_connector,omitempty"`
	Data                 *Data    `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransferRequestAndResponse) Reset()         { *m = TransferRequestAndResponse{} }
func (m *TransferRequestAndResponse) String() string { return proto.CompactTextString(m) }
func (*TransferRequestAndResponse) ProtoMessage()    {}
func (*TransferRequestAndResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_transfer_e57ce5730d8beaab, []int{2}
}
func (m *TransferRequestAndResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferRequestAndResponse.Unmarshal(m, b)
}
func (m *TransferRequestAndResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferRequestAndResponse.Marshal(b, m, deterministic)
}
func (dst *TransferRequestAndResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferRequestAndResponse.Merge(dst, src)
}
func (m *TransferRequestAndResponse) XXX_Size() int {
	return xxx_messageInfo_TransferRequestAndResponse.Size(m)
}
func (m *TransferRequestAndResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferRequestAndResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransferRequestAndResponse proto.InternalMessageInfo

func (m *TransferRequestAndResponse) GetFromConnector() string {
	if m != nil {
		return m.FromConnector
	}
	return ""
}

func (m *TransferRequestAndResponse) GetToConnector() string {
	if m != nil {
		return m.ToConnector
	}
	return ""
}

func (m *TransferRequestAndResponse) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type Data struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Cmd                  int32    `protobuf:"varint,2,opt,name=cmd" json:"cmd,omitempty"`
	FromId               string   `protobuf:"bytes,3,opt,name=from_id,json=fromId" json:"from_id,omitempty"`
	DestId               string   `protobuf:"bytes,4,opt,name=dest_id,json=destId" json:"dest_id,omitempty"`
	Msg                  string   `protobuf:"bytes,5,opt,name=msg" json:"msg,omitempty"`
	MsgType              int32    `protobuf:"varint,6,opt,name=msg_type,json=msgType" json:"msg_type,omitempty"`
	AckMsgType           int32    `protobuf:"varint,7,opt,name=ack_msg_type,json=ackMsgType" json:"ack_msg_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_transfer_e57ce5730d8beaab, []int{3}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (dst *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(dst, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Data) GetCmd() int32 {
	if m != nil {
		return m.Cmd
	}
	return 0
}

func (m *Data) GetFromId() string {
	if m != nil {
		return m.FromId
	}
	return ""
}

func (m *Data) GetDestId() string {
	if m != nil {
		return m.DestId
	}
	return ""
}

func (m *Data) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Data) GetMsgType() int32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *Data) GetAckMsgType() int32 {
	if m != nil {
		return m.AckMsgType
	}
	return 0
}

func init() {
	proto.RegisterType((*PingRequest)(nil), "hello.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "hello.PingResponse")
	proto.RegisterType((*TransferRequestAndResponse)(nil), "hello.TransferRequestAndResponse")
	proto.RegisterType((*Data)(nil), "hello.Data")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Transfer service

type TransferClient interface {
	Ping(ctx context.Context, opts ...grpc.CallOption) (Transfer_PingClient, error)
	Transfer(ctx context.Context, opts ...grpc.CallOption) (Transfer_TransferClient, error)
}

type transferClient struct {
	cc *grpc.ClientConn
}

func NewTransferClient(cc *grpc.ClientConn) TransferClient {
	return &transferClient{cc}
}

func (c *transferClient) Ping(ctx context.Context, opts ...grpc.CallOption) (Transfer_PingClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Transfer_serviceDesc.Streams[0], c.cc, "/hello.Transfer/Ping", opts...)
	if err != nil {
		return nil, err
	}
	x := &transferPingClient{stream}
	return x, nil
}

type Transfer_PingClient interface {
	Send(*PingRequest) error
	Recv() (*PingResponse, error)
	grpc.ClientStream
}

type transferPingClient struct {
	grpc.ClientStream
}

func (x *transferPingClient) Send(m *PingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transferPingClient) Recv() (*PingResponse, error) {
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transferClient) Transfer(ctx context.Context, opts ...grpc.CallOption) (Transfer_TransferClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Transfer_serviceDesc.Streams[1], c.cc, "/hello.Transfer/Transfer", opts...)
	if err != nil {
		return nil, err
	}
	x := &transferTransferClient{stream}
	return x, nil
}

type Transfer_TransferClient interface {
	Send(*TransferRequestAndResponse) error
	Recv() (*TransferRequestAndResponse, error)
	grpc.ClientStream
}

type transferTransferClient struct {
	grpc.ClientStream
}

func (x *transferTransferClient) Send(m *TransferRequestAndResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transferTransferClient) Recv() (*TransferRequestAndResponse, error) {
	m := new(TransferRequestAndResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Transfer service

type TransferServer interface {
	Ping(Transfer_PingServer) error
	Transfer(Transfer_TransferServer) error
}

func RegisterTransferServer(s *grpc.Server, srv TransferServer) {
	s.RegisterService(&_Transfer_serviceDesc, srv)
}

func _Transfer_Ping_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransferServer).Ping(&transferPingServer{stream})
}

type Transfer_PingServer interface {
	Send(*PingResponse) error
	Recv() (*PingRequest, error)
	grpc.ServerStream
}

type transferPingServer struct {
	grpc.ServerStream
}

func (x *transferPingServer) Send(m *PingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transferPingServer) Recv() (*PingRequest, error) {
	m := new(PingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Transfer_Transfer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransferServer).Transfer(&transferTransferServer{stream})
}

type Transfer_TransferServer interface {
	Send(*TransferRequestAndResponse) error
	Recv() (*TransferRequestAndResponse, error)
	grpc.ServerStream
}

type transferTransferServer struct {
	grpc.ServerStream
}

func (x *transferTransferServer) Send(m *TransferRequestAndResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transferTransferServer) Recv() (*TransferRequestAndResponse, error) {
	m := new(TransferRequestAndResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Transfer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hello.Transfer",
	HandlerType: (*TransferServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ping",
			Handler:       _Transfer_Ping_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Transfer",
			Handler:       _Transfer_Transfer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "transfer.proto",
}

func init() { proto.RegisterFile("transfer.proto", fileDescriptor_transfer_e57ce5730d8beaab) }

var fileDescriptor_transfer_e57ce5730d8beaab = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xcb, 0x4e, 0xe3, 0x30,
	0x14, 0x1d, 0xb7, 0x49, 0xd3, 0xde, 0x64, 0xaa, 0x91, 0x67, 0x31, 0x99, 0x0a, 0x89, 0x36, 0x12,
	0x52, 0x56, 0x11, 0x2a, 0x62, 0xc5, 0x8a, 0xd7, 0xa2, 0x0b, 0x24, 0x14, 0x55, 0x2c, 0xd8, 0x54,
	0x26, 0x76, 0x43, 0xd4, 0x26, 0x0e, 0xb1, 0x59, 0xf4, 0x0b, 0xf8, 0x06, 0x3e, 0x81, 0xbf, 0x44,
	0xbe, 0x49, 0xdb, 0x14, 0x09, 0xb1, 0xf3, 0x79, 0xf8, 0xf8, 0xf8, 0xda, 0x30, 0xd4, 0x15, 0x2b,
	0xd4, 0x52, 0x54, 0x51, 0x59, 0x49, 0x2d, 0xa9, 0xfd, 0x2c, 0xd6, 0x6b, 0x19, 0xdc, 0x82, 0x7b,
	0x9f, 0x15, 0x69, 0x2c, 0x5e, 0x5e, 0x85, 0xd2, 0xf4, 0x08, 0x06, 0x89, 0x2c, 0x0a, 0x91, 0x68,
	0x59, 0xf9, 0x64, 0x4c, 0xc2, 0x41, 0xbc, 0x27, 0xa8, 0x0f, 0x4e, 0x2e, 0x94, 0x62, 0xa9, 0xf0,
	0x3b, 0xa8, 0x6d, 0x61, 0x10, 0x82, 0x57, 0xc7, 0xa8, 0x52, 0x16, 0x4a, 0xb4, 0x9d, 0xe4, 0xd0,
	0xf9, 0x46, 0x60, 0x34, 0x6f, 0xaa, 0x34, 0xa7, 0x5e, 0x16, 0x7c, 0xb7, 0xf1, 0x04, 0x86, 0xcb,
	0x4a, 0xe6, 0x8b, 0xaf, 0x2d, 0x7e, 0x1b, 0xf6, 0x7a, 0xd7, 0x64, 0x02, 0x9e, 0x96, 0x2d, 0x53,
	0x5d, 0xc7, 0xd5, 0x72, 0x6f, 0x39, 0x06, 0x8b, 0x33, 0xcd, 0xfc, 0xee, 0x98, 0x84, 0xee, 0xd4,
	0x8d, 0xf0, 0xbe, 0xd1, 0x0d, 0xd3, 0x2c, 0x46, 0x21, 0xf8, 0x20, 0x60, 0x19, 0x48, 0x87, 0xd0,
	0xc9, 0x38, 0x9e, 0x63, 0xc7, 0x9d, 0x8c, 0xd3, 0x3f, 0xd0, 0x4d, 0x72, 0x8e, 0x99, 0x76, 0x6c,
	0x96, 0xf4, 0x1f, 0x38, 0xd8, 0x2a, 0xe3, 0x18, 0x37, 0x88, 0x7b, 0x06, 0xce, 0x50, 0xe0, 0x42,
	0x69, 0x23, 0x58, 0xb5, 0x60, 0xe0, 0x0c, 0x33, 0x72, 0x95, 0xfa, 0x36, 0x92, 0x66, 0x49, 0xff,
	0x43, 0x3f, 0x57, 0xe9, 0x42, 0x6f, 0x4a, 0xe1, 0xf7, 0x30, 0xda, 0xc9, 0x55, 0x3a, 0xdf, 0x94,
	0x82, 0x8e, 0xc1, 0x63, 0xc9, 0x6a, 0xb1, 0x93, 0x1d, 0x94, 0x81, 0x25, 0xab, 0xbb, 0xda, 0x31,
	0x7d, 0x27, 0xd0, 0xdf, 0x4e, 0x8d, 0x9e, 0x83, 0x65, 0x86, 0x4d, 0x69, 0x73, 0xa7, 0xd6, 0x03,
	0x8e, 0xfe, 0x1e, 0x70, 0xf5, 0x50, 0x83, 0x5f, 0x21, 0x39, 0x25, 0xf4, 0xa1, 0x15, 0x31, 0x69,
	0x6c, 0xdf, 0xbf, 0xc4, 0xe8, 0x67, 0x4b, 0x9d, 0x7b, 0xe5, 0x3d, 0x42, 0x74, 0xb1, 0xfd, 0x5d,
	0x4f, 0x3d, 0xfc, 0x5e, 0x67, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe1, 0xae, 0x20, 0x18, 0x70,
	0x02, 0x00, 0x00,
}
